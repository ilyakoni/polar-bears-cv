{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA+De,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA/Df,IAAA,EAAA,EAAA,QAAA,OACA,EAAA,EAAA,QAAA,SACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,UA4De,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjDf,eAAe,EAAM,EAAsB,GACnC,IAAC,IAAK,UAAW,EAAM,GAAI,IAAQ,EAAQ,GAC3C,QAAU,EAAM,QAAA,gBAAgB,EAAK,IACrC,EAAW,GACf,EAAE,QAAQ,CAAC,EAAsB,KAC7B,EAAS,KAAK,WACN,IAAA,EAAO,EAAK,QAAA,KAAK,EAAM,GACvB,EAAM,IACC,EAAA,QAAA,KAAK,EAAM,CAAC,GAAI,KAGhB,EAAA,QAAA,KAAK,EAAK,QAAA,QAAQ,GAAO,CAAC,GAAI,IACrC,EAAI,cAAc,QACR,EAAM,MAAM,iBARhB,YAYZ,QAAQ,IAAI,GAGtB,eAAe,EAAK,GACZ,MAAmB,iBAAZ,EACA,EAAG,QAAA,aAAe,EAAG,QAAA,aAAa,GACnC,IAAI,uBAAwB,MAAM,IAAU,eAE7C,aAAmB,YACjB,IAAI,WAAW,GAEd,EAGhB,SAAS,EAAQ,GACT,GAAA,EAAM,CACF,GAAgB,iBAAT,EACA,MAAA,CAAC,GAAI,CAAC,UAAW,EAAM,GAAA,EAAA,UAE7B,GAAI,EAAK,GACN,MAAmB,iBAAZ,EAAK,GACL,CAAC,GAAI,CAAC,UAAW,EAAK,GAAI,GAAA,EAAA,UAE1B,CAAC,GAAI,CAAC,UAAW,EAAK,GAAG,WAAa,GAChC,GAAI,EAAK,GAAG,IAAM,EAAA,UAGpC,MAAA,CAAC,GAAI,CAAC,UAAW,GAAI,GAAA,EAAA,UAKjB,IAAA,EAAA,EAAA,QAAA,QAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport JSZip, { JSZipObject } from 'jszip';\n\n\n\nexport type UnzipSource = string | ArrayBuffer | Uint8Array;\n\nexport type UnzipOptions = {\n    to?: {fs?: typeof fs, directory?: string}\n};\n\n\nasync function unzip(zipfile: UnzipSource, opts?: UnzipOptions | string) {\n    var {to: {directory: odir, fs: ofs}} = options(opts),\n        z = await JSZip.loadAsync(await open(zipfile)),\n        promises = [];\n    z.forEach((relativePath: string, entry: JSZipObject) => {\n        promises.push((async () => {\n            var outf = path.join(odir, relativePath);\n            if (entry.dir) {\n                mkdirp.sync(outf, {fs: ofs});\n            }\n            else {\n                mkdirp.sync(path.dirname(outf), {fs: ofs});\n                ofs.writeFileSync(outf,\n                    await entry.async('uint8array'));\n            }\n        })());\n    });\n    await Promise.all(promises);\n}\n\nasync function open(zipfile: UnzipSource) {\n    if (typeof zipfile === 'string') {\n        return fs.readFileSync ? fs.readFileSync(zipfile)\n            : new Uint8Array(await (await fetch(zipfile)).arrayBuffer());\n    }\n    else if (zipfile instanceof ArrayBuffer) {\n        return new Uint8Array(zipfile);\n    }\n    else return zipfile;\n}\n\nfunction options(opts?: UnzipOptions | string): UnzipOptions {\n    if (opts) {\n        if (typeof opts === 'string') {\n            return {to: {directory: opts, fs}};\n        }\n        else if (opts.to) {\n            if (typeof opts.to === 'string')\n                return {to: {directory: opts.to, fs}};\n            else\n                return {to: {directory: opts.to.directory || '',\n                             fs: opts.to.fs || fs}};\n        }\n    }\n    return {to: {directory: '', fs}};\n}\n\n\n\nexport default unzip;\n"]}